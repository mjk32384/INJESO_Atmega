
Project_Gliding_Chute.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800100  00800100  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001173  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b28  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083d  00000000  00000000  000021c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000883  00000000  00000000  000033df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	60 c0       	rjmp	.+192    	; 0x13a <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	65 d0       	rcall	.+202    	; 0x18e <main>
  c4:	2b c1       	rjmp	.+598    	; 0x31c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
	TCCR0 |= (1 << CS02) | (1 << CS00);
	// 출력 비교 인터럽트 허용
	TIMSK |= (1 << OCIE0);
}

ISR(TIMER0_COMP_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	flag = 1;  // 플래그 비트 설정
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_18>:
ISR(USART0_RX_vect) {
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	0b b6       	in	r0, 0x3b	; 59
  f2:	0f 92       	push	r0
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	
	UART0_receive_string(uart0_buffer, '\n');
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	8e d0       	rcall	.+284    	; 0x230 <UART0_receive_string>
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_30>:
ISR(USART1_RX_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	0b b6       	in	r0, 0x3b	; 59
 146:	0f 92       	push	r0
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31

	UART1_receive_string(uart1_buffer, '\n');
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	81 e8       	ldi	r24, 0x81	; 129
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	7c d0       	rcall	.+248    	; 0x260 <UART1_receive_string>
	
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0b be       	out	0x3b, r0	; 59
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:

*/

int main(void) {

	PWM_init();
 18e:	26 d0       	rcall	.+76     	; 0x1dc <PWM_init>
	sei(); // Enable global interrupts
 190:	78 94       	sei

	while (1) {
		//int16_t control_value = PID_control(target_value, current_value);
		
		
		servo_control(250);
 192:	8a ef       	ldi	r24, 0xFA	; 250
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	2e d0       	rcall	.+92     	; 0x1f4 <servo_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	83 ed       	ldi	r24, 0xD3	; 211
 19c:	90 e3       	ldi	r25, 0x30	; 48
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x10>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x1a>
 1a8:	00 00       	nop
		_delay_ms(1000);
		servo_control(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	22 d0       	rcall	.+68     	; 0x1f4 <servo_control>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x28>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x32>
		_delay_ms(1000);
		servo_control(-250);
 1c0:	00 00       	nop
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	16 d0       	rcall	.+44     	; 0x1f4 <servo_control>
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	83 ed       	ldi	r24, 0xD3	; 211
 1cc:	90 e3       	ldi	r25, 0x30	; 48
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x40>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x4a>
 1d8:	00 00       	nop
 1da:	db cf       	rjmp	.-74     	; 0x192 <main+0x4>

000001dc <PWM_init>:

	int16_t output = (Kp * error) + (Ki * integral) + (Kd * derivative);
	previous_error = error;

	return output;
}
 1dc:	82 e8       	ldi	r24, 0x82	; 130
 1de:	8f bd       	out	0x2f, r24	; 47
 1e0:	8b e1       	ldi	r24, 0x1B	; 27
 1e2:	8e bd       	out	0x2e, r24	; 46
 1e4:	8f e4       	ldi	r24, 0x4F	; 79
 1e6:	93 ec       	ldi	r25, 0xC3	; 195
 1e8:	97 bd       	out	0x27, r25	; 39
 1ea:	86 bd       	out	0x26, r24	; 38
 1ec:	87 b3       	in	r24, 0x17	; 23
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	08 95       	ret

000001f4 <servo_control>:

void servo_control(int16_t control_value) {
	// 서보모터는 1ms에서 2ms 사이의 펄스 신호를 필요로 합니다.
	// 50Hz PWM에서 1ms는 1000us, 2ms는 2000us입니다.
	// ICR1 = 49999일 때, 1ms = 1000 / (20000/49999), 2ms = 2000 / (20000/49999)
	uint16_t pulse_width = 1000 + control_value; // control_value가 -500 ~ 500 사이의 값이라고 가정
 1f4:	9c 01       	movw	r18, r24
 1f6:	28 51       	subi	r18, 0x18	; 24
 1f8:	3c 4f       	sbci	r19, 0xFC	; 252
	
	if (pulse_width < 1000) pulse_width = 1000;
 1fa:	28 3e       	cpi	r18, 0xE8	; 232
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	38 07       	cpc	r19, r24
 200:	10 f4       	brcc	.+4      	; 0x206 <servo_control+0x12>
 202:	28 ee       	ldi	r18, 0xE8	; 232
 204:	33 e0       	ldi	r19, 0x03	; 3
	if (pulse_width > 2000) pulse_width = 2000;
 206:	21 3d       	cpi	r18, 0xD1	; 209
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	38 07       	cpc	r19, r24
 20c:	10 f0       	brcs	.+4      	; 0x212 <servo_control+0x1e>
 20e:	20 ed       	ldi	r18, 0xD0	; 208
 210:	37 e0       	ldi	r19, 0x07	; 7
	
	OCR1A = (pulse_width * 49999) / 20000;
 212:	af e4       	ldi	r26, 0x4F	; 79
 214:	b3 ec       	ldi	r27, 0xC3	; 195
 216:	73 d0       	rcall	.+230    	; 0x2fe <__umulhisi3>
 218:	20 e2       	ldi	r18, 0x20	; 32
 21a:	3e e4       	ldi	r19, 0x4E	; 78
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	52 d0       	rcall	.+164    	; 0x2c6 <__divmodsi4>
 222:	3b bd       	out	0x2b, r19	; 43
 224:	2a bd       	out	0x2a, r18	; 42
 226:	08 95       	ret

00000228 <UART0_receive>:
void UART1_transmit_string_LF(const char* str) {
	while (*str) {
		UART1_transmit(*str++);
	}
	UART1_transmit('\n');
}
 228:	5f 9b       	sbis	0x0b, 7	; 11
 22a:	fe cf       	rjmp	.-4      	; 0x228 <UART0_receive>
 22c:	8c b1       	in	r24, 0x0c	; 12
 22e:	08 95       	ret

00000230 <UART0_receive_string>:
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	16 2f       	mov	r17, r22
 23a:	f6 df       	rcall	.-20     	; 0x228 <UART0_receive>
 23c:	81 13       	cpse	r24, r17
 23e:	02 c0       	rjmp	.+4      	; 0x244 <UART0_receive_string+0x14>
 240:	18 82       	st	Y, r1
 242:	03 c0       	rjmp	.+6      	; 0x24a <UART0_receive_string+0x1a>
 244:	88 83       	st	Y, r24
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	f8 cf       	rjmp	.-16     	; 0x23a <UART0_receive_string+0xa>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <UART1_receive>:
 252:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 256:	88 23       	and	r24, r24
 258:	e4 f7       	brge	.-8      	; 0x252 <UART1_receive>
 25a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 25e:	08 95       	ret

00000260 <UART1_receive_string>:

void UART1_receive_string(char* buffer, unsigned char terminator) {
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	16 2f       	mov	r17, r22
	unsigned char receivedChar;
	while (1) {
		receivedChar = UART1_receive();
 26a:	f3 df       	rcall	.-26     	; 0x252 <UART1_receive>
		if (receivedChar == terminator) {
 26c:	81 13       	cpse	r24, r17
 26e:	02 c0       	rjmp	.+4      	; 0x274 <UART1_receive_string+0x14>
			*buffer = '\0';
 270:	18 82       	st	Y, r1
			break;
		}
		*buffer++ = receivedChar;
	}
}
 272:	03 c0       	rjmp	.+6      	; 0x27a <UART1_receive_string+0x1a>
		receivedChar = UART1_receive();
		if (receivedChar == terminator) {
			*buffer = '\0';
			break;
		}
		*buffer++ = receivedChar;
 274:	88 83       	st	Y, r24
 276:	21 96       	adiw	r28, 0x01	; 1
	}
 278:	f8 cf       	rjmp	.-16     	; 0x26a <UART1_receive_string+0xa>
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	08 95       	ret

00000282 <__udivmodsi4>:
 282:	a1 e2       	ldi	r26, 0x21	; 33
 284:	1a 2e       	mov	r1, r26
 286:	aa 1b       	sub	r26, r26
 288:	bb 1b       	sub	r27, r27
 28a:	fd 01       	movw	r30, r26
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <__udivmodsi4_ep>

0000028e <__udivmodsi4_loop>:
 28e:	aa 1f       	adc	r26, r26
 290:	bb 1f       	adc	r27, r27
 292:	ee 1f       	adc	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	a2 17       	cp	r26, r18
 298:	b3 07       	cpc	r27, r19
 29a:	e4 07       	cpc	r30, r20
 29c:	f5 07       	cpc	r31, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__udivmodsi4_ep>
 2a0:	a2 1b       	sub	r26, r18
 2a2:	b3 0b       	sbc	r27, r19
 2a4:	e4 0b       	sbc	r30, r20
 2a6:	f5 0b       	sbc	r31, r21

000002a8 <__udivmodsi4_ep>:
 2a8:	66 1f       	adc	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	1a 94       	dec	r1
 2b2:	69 f7       	brne	.-38     	; 0x28e <__udivmodsi4_loop>
 2b4:	60 95       	com	r22
 2b6:	70 95       	com	r23
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	bd 01       	movw	r22, r26
 2c2:	cf 01       	movw	r24, r30
 2c4:	08 95       	ret

000002c6 <__divmodsi4>:
 2c6:	05 2e       	mov	r0, r21
 2c8:	97 fb       	bst	r25, 7
 2ca:	16 f4       	brtc	.+4      	; 0x2d0 <__divmodsi4+0xa>
 2cc:	00 94       	com	r0
 2ce:	0f d0       	rcall	.+30     	; 0x2ee <__negsi2>
 2d0:	57 fd       	sbrc	r21, 7
 2d2:	05 d0       	rcall	.+10     	; 0x2de <__divmodsi4_neg2>
 2d4:	d6 df       	rcall	.-84     	; 0x282 <__udivmodsi4>
 2d6:	07 fc       	sbrc	r0, 7
 2d8:	02 d0       	rcall	.+4      	; 0x2de <__divmodsi4_neg2>
 2da:	46 f4       	brtc	.+16     	; 0x2ec <__divmodsi4_exit>
 2dc:	08 c0       	rjmp	.+16     	; 0x2ee <__negsi2>

000002de <__divmodsi4_neg2>:
 2de:	50 95       	com	r21
 2e0:	40 95       	com	r20
 2e2:	30 95       	com	r19
 2e4:	21 95       	neg	r18
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	4f 4f       	sbci	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255

000002ec <__divmodsi4_exit>:
 2ec:	08 95       	ret

000002ee <__negsi2>:
 2ee:	90 95       	com	r25
 2f0:	80 95       	com	r24
 2f2:	70 95       	com	r23
 2f4:	61 95       	neg	r22
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__umulhisi3>:
 2fe:	a2 9f       	mul	r26, r18
 300:	b0 01       	movw	r22, r0
 302:	b3 9f       	mul	r27, r19
 304:	c0 01       	movw	r24, r0
 306:	a3 9f       	mul	r26, r19
 308:	70 0d       	add	r23, r0
 30a:	81 1d       	adc	r24, r1
 30c:	11 24       	eor	r1, r1
 30e:	91 1d       	adc	r25, r1
 310:	b2 9f       	mul	r27, r18
 312:	70 0d       	add	r23, r0
 314:	81 1d       	adc	r24, r1
 316:	11 24       	eor	r1, r1
 318:	91 1d       	adc	r25, r1
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
